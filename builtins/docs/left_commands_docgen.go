package docs

func init() {

	Definition["left"] = "# `left` - Command Reference\n\n> Left substring every item in a list\n\n## Description\n\nTakes a list from STDIN and returns a left substring of that same list.\n\nOne parameter is required and that is the number of characters to return. If\nthe parameter is a negative then `left` counts from the right.\n\n## Usage\n\n```\n<stdin> -> left int -> <stdout>\n```\n\n## Examples\n\nCount from the left\n\n```\n» ja: [Monday..Wednesday] -> left 2\n[\n    \"Mo\",\n    \"Tu\",\n    \"We\"\n]\n```\n\nCount from the right\n\n```\n» ja: [Monday..Wednesday] -> left -3\n[\n    \"Mon\",\n    \"Tues\",\n    \"Wednes\"\n]\n```\n\n## Detail\n\nSupported data types can queried via `runtime`\n\n```\nruntime: --marshallers\nruntime: --unmarshallers\n```\n\n## Synonyms\n\n* `left`\n* `list.left`\n\n\n## See Also\n\n* [`a` (mkarray)](../commands/a.md):\n  A sophisticated yet simple way to build an array or list\n* [`count`](../commands/count.md):\n  Count items in a map, list or array\n* [`ja` (mkarray)](../commands/ja.md):\n  A sophisticated yet simply way to build a JSON array\n* [`lang.MarshalData()` (system API)](../apis/lang.MarshalData.md):\n  Converts structured memory into a Murex data-type (eg for stdio)\n* [`lang.UnmarshalData()` (system API)](../apis/lang.UnmarshalData.md):\n  Converts a Murex data-type into structured memory\n* [`prefix`](../commands/prefix.md):\n  Prefix a string to every item in a list\n* [`right`](../commands/right.md):\n  Right substring every item in a list\n* [`runtime`](../commands/runtime.md):\n  Returns runtime information on the internal state of Murex\n* [`suffix`](../commands/suffix.md):\n  Prefix a string to every item in a list"

}
