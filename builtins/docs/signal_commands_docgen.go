package docs

func init() {

	Definition["signal"] = "# `signal`\n\n> Sends a signal RPC\n\n## Description\n\n`signal` sends an operating system RPC (known as \"signal\") to a specified\nprocess, identified via it's process ID (\"pid\").\n\nThe following quote from [Wikipedia explains what signals](https://en.wikipedia.org/wiki/Signal_(IPC))\nare:\n\n> Signals are standardized messages sent to a running program to trigger\n> specific behavior, such as quitting or error handling. They are a limited\n> form of inter-process communication (IPC), typically used in Unix, Unix-like,\n> and other POSIX-compliant operating systems.\n>\n> A signal is an asynchronous notification sent to a process or to a specific\n> thread within the same process to notify it of an event. Common uses of\n> signals are to interrupt, suspend, terminate or kill a process.\n\n## Usage\n\n1. The first parameter is the process ID (int)\n2. The second parameter is the signal name (str). This will be all in\n   UPPERCASE and prefixed \"SIG\"\n\n```\nsignal pid SIGNAL\n```\n\n## Examples\n\n```\nbg {\n    exec <pid:GLOBAL.SIGNAL_TRAP_PID> $MUREX_EXE -c %(\n        event signalTrap example=SIGINT {\n            out \"SIGINT received, not quitting\"\n        }\n        sleep 4\n    )\n}\nsleep 2 # just in case `exec` hasn't started yet\nsignal $GLOBAL.SIGNAL_TRAP_PID SIGINT\n```\n\n## Flags\n\n* `SIGINT`\n    **\"Signal interrupt\"** -- equivalent to pressing `ctrl`+`c`\n* `SIGQUIT`\n    **\"Signal quit\"** -- requests the process quits and performs a core dump\n* `SIGTERM`\n    **\"Signal terminate\"** -- request for a processes termination. Similar to `SIGINT`\n* `SIGUSR1`\n    **\"Signal user 1\"** -- user defined\n* `SIGUSR2`\n    **\"Signal user 2\"** -- user defined\n\n## Detail\n\nThe interrupts listed above are a subset of what is supported on each operating\nsystem. Please consult your operating systems docs for details on each signal\nand what their function is.\n\n### Windows Support\n\nWhile Windows doesn't officially support signals, the following POSIX signals\nare emulated:\n\n```go\nbuiltins/events/signalTrap/interrupts_windows.go\n```\n\n### Plan 9 Support\n\nPlan 9 is not currently supported. Please raise a feature request on Github if\nthis is a feature you would like added.\n\n### Catching incoming signals\n\nSignals can be caught (often referred to as \"trapped\") in Murex with an event:\n`signalTrap`. Read below for details.\n\n## See Also\n\n* [`MUREX_EXE` (path)](../variables/MUREX_EXE.md):\n  Absolute path to running shell\n* [`bg`](../commands/bg.md):\n  Run processes in the background\n* [`event`](../commands/event.md):\n  Event driven programming for shell scripts\n* [`out`](../commands/out.md):\n  Print a string to the STDOUT with a trailing new line character\n* [`signalTrap`](../events/signaltrap.md):\n  Trap OS signals"

}
