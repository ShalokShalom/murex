alias help=murex-docs
alias builtin=fexec builtin

function h {
    # Output the murex history log in a human readable format
    history -> foreach { -> set json line; out "$line[Index]: $line[Block]" } -> cast *
}

function aliases {
   # Output the aliases in human readable format
   runtime: --aliases -> formap name alias {
        $name -> sprintf: "%10s => ${esccli @alias}\n"
	} -> cast: str
}

test unit function aliases {
    "PreBlock": ({
        alias ALIAS_UNIT_TEST=example param1 param2 param3
    }),
    "StdoutRegex": "([- _0-9a-zA-Z]+ => .*?\n)+",
    "StdoutType": "str",
    "PostBlock": ({
        !alias ALIAS_UNIT_TEST
    })
}

autocomplete: set cd { [{
    "IncDirs": true
}] }

autocomplete: set mkdir { [{
    "IncDirs": true,
    "AllowMultiple": true
}] }

autocomplete: set rmdir { [{
    "IncDirs": true,
    "AllowMultiple": true
}] }

autocomplete: set exec { [
    {
        "IncFiles": true,
        "IncDirs": true,
        "IncExePath": true
    },
    {
        "NestedCommand": true
    }
] }

autocomplete: set format { [{
    "Dynamic": ({ runtime: --marshallers })
}] }

autocomplete: set swivel-datatype { [{
    "Dynamic": ({ runtime: --marshallers })
}] }

private autocomplete.data-types {
    # Returns all murex data-types compiled
    runtime: --readarray -> format: str
    runtime: --writearray -> format: str
    runtime: --readmap -> format: str
    runtime: --marshallers -> format: str
    runtime: --unmarshallers -> format: str
}

test unit private autocomplete.data-types {
    "StdoutRegex": (^(([a-z0-9]+|\*)\n)+),
    "StdoutType":  "str",
    "StdoutBlock": ({
        -> len -> set len;
        if { = len>0 } then {
            out "Len greater than 0"
        } else {
            err "No elements returned"
        }
    }),
    "StdoutIsArray": true
}

autocomplete: set cast { [{
    "Dynamic": ({ autocomplete.data-types })
}] }

autocomplete: set tout { [{
    "Dynamic": ({ autocomplete.data-types })
}] }

private autocomplete.variables.locals {
    # Returns all local variable names
    runtime: --variables -> formap k v { out $k } -> cast: str
}

private autocomplete.variables.globals {
    # Returns all global variable names
    runtime: --globals -> formap k v { out $k } -> cast: str
}

private autocomplete.variables {
    # Returns all global and local variable names
    cast: str
    autocomplete.variables.locals
    autocomplete.variables.globals
}

test unit private autocomplete.variables {
    "PreBlock": ({ global MUREX_UNIT_TEST=foobar }),
    "PostBlock": ({ !global MUREX_UNIT_TEST }),
    "StdoutRegex": (^([_a-zA-Z0-9]+\n)+),
    "StdoutType":  "str",
    "StdoutBlock": ({
        -> len -> set len;
        if { = len>0 } then {
            out "Len greater than 0"
        } else {
            err "No elements returned"
        }
    }),
    "StdoutIsArray": true
}

autocomplete: set set { [{
    "Dynamic": ({ autocomplete.variables.locals }),
    "AnyValue": true
}] }

autocomplete: set !set { [{
    "Dynamic": ({ autocomplete.variables.locals })
}] }

autocomplete: set global { [{
    "Dynamic": ({ autocomplete.variables.globals }),
    "AnyValue": true
}] }

autocomplete: set !global { [{
    "Dynamic": ({ autocomplete.variables.globals })
}] }

autocomplete: set export { [
    {
        "Dynamic": ({ autocomplete.variables }),
        "AnyValue": true
    },
    {
        "IncDirs": true
    }
] }

autocomplete: set !export { [{
    "DynamicDesc": ({ runtime --exports })
}] }

autocomplete: set unset { [{
    "DynamicDesc": ({ runtime --exports })
}] }

autocomplete: set "[" { [{
    "AnyValue": true,
    "AllowMultiple": true,
    "ExecCmdline": true,
    "Dynamic": ({
        switch ${ get-type: stdin } {
            case * {
                #<stdin> -> tabulate -> [ 0: ] -> format json -> [ 0 ]
                <stdin> -> [ 0: ] -> format json -> [ 0 ] -> append "]"
            }

            case csv {
                <stdin> -> [ 0: ] -> format json -> [ 0 ] -> append "]"
            }
            
            case jsonl {
                <stdin> -> [ 0 ] -> set header
                $header -> cast utf8 -> [ 0 -1 ] -> set jsonl_format
                if { = jsonl_format==`[]` } then {
                    tout json $header -> append "]"
                }
            }

            catch {
                <stdin> -> formap k v { out $k } -> cast str -> append "]"
            }
        }
    })
}] }

autocomplete: set "[[" { [{
    "AnyValue": true,
    "ExecCmdline": true,
    "AutoBranch": true,
    "Dynamic": ({ -> struct-keys -> append "]]" })
} ]}

private autocomplete.config.get.apps {
    # Returns all app names for the 'app' field in `config`
    config: -> formap k v { out $k } -> cast: str -> msort
}

test unit private autocomplete.config.get.apps {
    "StdoutRegex": (shell),
    "StdoutType":  "str",
    "StdoutBlock": ({
        -> len -> set len;
        if { = len>0 } then {
            out "Len greater than 0"
        } else {
            err "No elements returned"
        }
    }),
    "StdoutIsArray": true
}

private autocomplete.config.get.keys {
    # Returns all keys for the 'app' field in `config`
    config -> [ $PARAMS[0] ] -> formap k v { out $k } -> cast: str
}

test unit private autocomplete.config.get.keys {
    "Parameters": [ "shell" ],
    "StdoutRegex": (prompt),
    "StdoutType":  "str",
    "StdoutBlock": ({
        -> len -> set len;
        if { = len>0 } then {
            out "Len greater than 0"
        } else {
            err "No elements returned"
        }
    }),
    "StdoutIsArray": true
}

autocomplete: set config { [{
    "Flags": [ "get", "set", "eval", "define", "default" ],
    "FlagValues": {
        "get": [
            { "Dynamic": ({ autocomplete.config.get.apps }) },
            { "Dynamic": ({ autocomplete.config.get.keys $PARAMS[1] }) }
        ],               
        "set": [
            { "Dynamic": ({ autocomplete.config.get.apps }) },
            { "Dynamic": ({ autocomplete.config.get.keys $PARAMS[1] }) },
            { "Dynamic": ({
				switch {
					case { ${ config -> [[ /$PARAMS[1]/$PARAMS[2]/Data-Type ]] } == "bool" } {
						ja [true,false]
					}

					case { config -> [ $PARAMS[1] ] -> [ $PARAMS[2] ] -> [ <!null> Options ] } {
						config -> [ $PARAMS[1] ] -> [ $PARAMS[2] ] -> [ Options ]
					}
					
                	catch {
						out ${ config -> [ $PARAMS[1] ] -> [ $PARAMS[2] ] -> [ Default ]}
					}
				}
			}) }
        ],
        "eval": [
            { "Dynamic": ({ autocomplete.config.get.apps }) },
            { "Dynamic": ({ autocomplete.config.get.keys $PARAMS[1] }) }
        ],
        "default": [
            { "Dynamic": ({ autocomplete.config.get.apps }) },
            { "Dynamic": ({ autocomplete.config.get.keys $PARAMS[1] }) }
        ]
    }
}] }

autocomplete: set test-autocomplete { [{
    "Flags": [ "111", "222", "333", "444" ],
    "FlagValues": {
        "111": [
            { "Dynamic": ({ out aaa\nbbb\nccc\n$PARAMS }) },
            { "Dynamic": ({ out ddd\neee\nfff\n$PARAMS }) }
        ],               
        "222": [
            { "Dynamic": ({ out ggg\nhhh\niii\n$PARAMS }) },
            { "Dynamic": ({ out jjj\nkkk\nlll\n$PARAMS }) }
        ],
        "333": [
            { "Dynamic": ({ out mmm\nnnn\nooo\n$PARAMS }) },
            { "Dynamic": ({ out ppp\nqqq\nrrr\n$PARAMS }) }
        ],
        "444": [
            { "Dynamic": ({ out sss\nttt\nuuu\n$PARAMS }) },
            { "Dynamic": ({ out vvv\nwww\nxxx\n$PARAMS }) }
        ]
    }
}] }

autocomplete: set !config { [
    { "Dynamic": ({ autocomplete.config.get.apps }) },
    { "Dynamic": ({ autocomplete.config.get.keys $PARAMS[0] }) }
] }


autocomplete: set event { [
    {
        "Dynamic": ({ runtime: --events -> formap k v { out $k } })
    }
] }

autocomplete: set !event { [
    {
        "Dynamic": ({ runtime: --events -> formap k v { out $k } -> msort })
    },
    {
        "Dynamic": ({ runtime: --events -> [ $ARGS[1] ] -> formap k v { out $k } -> msort })
    }
] }

private autocomplete.alias {
    # Returns a map of all alises and the code they execute
    runtime: --aliases -> formap --jmap name value { $name } { out @value }
}

test unit private autocomplete.alias {
    "StdoutRegex": (jobs),
	"StdoutType":  "json",
    "StdoutBlock": ({
        -> len -> set len;
        if { = len>0 } then {
            out "Len greater than 0"
        } else {
            err "No elements returned"
        }
    }),
    "StdoutIsMap": true
}

autocomplete: set !alias { [{
    "DynamicDesc": ({ autocomplete.alias }),
    "ListView": true
}] }

private autocomplete.functions {
    # Returns a map of all murex public functions
    runtime: --functions -> formap --jmap k v { $k } { out: $v[summary] }
}

test unit private autocomplete.functions {
    "PreBlock": ({
        function unit.test.autocomplete.functions {
            out "This is only a dummy function for testing"
        }
    }),
    "PostBlock": ({
        !function unit.test.autocomplete.functions
    }),
    "StdoutRegex": (unit.test.autocomplete.functions),
	"StdoutType":  "json",
    "StdoutBlock": ({
        -> len -> set len;
        if { = len>0 } then {
            out "Len greater than 0"
        } else {
            err "No elements returned"
        }
    }),
    "StdoutIsMap": true
}

autocomplete: set !function { [{
    "DynamicDesc": ({ autocomplete.functions }),
    "ListView": true
} ]}

private autocomplete.privates {
    # Returns a map of all murex private functions
    runtime: --privates -> struct-keys: 3 -> regexp m,/.*?/.*?/, -> foreach --jmap private { $private } { runtime: --privates -> [[ $private/Summary ]] }
}

test unit private autocomplete.privates {
	"StdoutType":  "json",
    "StdoutBlock": ({
        -> len -> set len;
        if { = len>0 } then {
            out "Len greater than 0"
        } else {
            err "No elements returned"
        }
    }),
    "StdoutIsMap": true
}

private autocomplete.builtins {
    # Returns a map of all murex builtins
    runtime --builtins -> foreach --jmap builtin { $builtin } { murex-docs --summary $builtin }
}

test unit private autocomplete.builtins {
	"StdoutType":  "json",
    "StdoutBlock": ({
        -> len -> set len;
        if { = len>0 } then {
            out "Len greater than 0"
        } else {
            err "No elements returned"
        }
    }),
    "StdoutIsMap": true
}

autocomplete: set autocomplete { [{
    "Flags": [ "get", "set" ],
    "FlagValues": {
        "get": [{
            "Dynamic": ({
                runtime: --autocomplete -> formap: cmd ! { out $cmd } -> cast: str
            })
        }]
    }
}] }

private git-refs {
    # Returns a map of branches and tags excluding checked-out branch in the current git repository
    map {
        git branch -a --format='%(refname:strip=2)' \
            -> [ :0 ] -> !match '*' \
            -> regexp (s,^origin/,,)
        git tag --format='%(refname:strip=2)' \
            -> regexp (s,^origin/,,)
    } {
        git branch -a --format='%(refname:strip=0)' \
            -> [ :0 ] -> !match '*' \
            -> prefix "Branch Ref: "
        git tag --format='%(refname:strip=0)' \
            -> prefix "Tag Ref: "
    } 
}

autocomplete: set git %[{
    DynamicDesc: '{
        cast json
        git help -a -> @[..^Ancillary]re -> tabulate: --map -> set commands
        git config --list -> regexp %(f/alias\.(.*)$/) -> foreach --jmap alias {
            $alias -> regexp %(f/^(.*?)=)
        } {
            $alias -> regexp %(f/=(.*)$) -> prefix %(alias: )
        } -> set aliases
        $commands ~> $aliases
    }'
    ListView: true
    FlagValues: {
        init: [{
            Flags: [--bare]
        }]
        add: [{
            AllowMultiple: true
            AllowAny: true
            Dynamic: %({
                git -c color.ui=no status -s -> regexp 'f/^.[^\s] ["]?(.*?)["]?$/' -> cast str
            })
        }]
        diff: [{
            AllowMultiple: true
            Dynamic: %({ git -c color.ui=no status -s -> [:1] })
        }]
        mv: [{ 
            IncFiles: true
        }],
        rm: [{
            IncFiles:      true
            AllowMultiple: true
        }]
        checkout: [{
            DynamicDesc: %({ git-refs })
            Flags: [ -b ]
        }]
        merge: [{
            DynamicDesc: %({ git-refs })
        }]
        commit: [{
            Flags: [-a -m --amend]
            FlagValues: {
                --amend: [{ AnyValue: true }]
            }
            AllowMultiple: true
            AllowAny: true
        }]
        push: [{
            Flags: [--tags]
        }],
        branch: [{
            Flags: [-d --delete]
            FlagValues: {
                -d:       [{ DynamicDesc: %({ git-refs }) }]
                --delete: [{ DynamicDesc: %({ git-refs }) }]
            }
        }],
        "": [{
            Dynamic: '{ git --help $1 -> man-get-flags }'
            AllowMultiple: true
            AllowAny: true
        }]
    }
}]

autocomplete: set docker %[
    {
        DynamicDesc: %({
            docker help -> @[^Usage:..]re -> tabulate: --split-comma --map
        })

        ListView: true

        "FlagValues": {
            "": [{
                "DynamicDesc": '{
                    docker help $1 -> @[^Usage:..]re -> tabulate: --split-comma --map 
                }'
            }]
        }
    }
    { IncFiles: true }
]

private autocomplete.docker-compose.services {
    # Returns a list of services described in docker-compose.yaml
    open docker-compose.yaml -> [ services ] -> formap k v { out "$k" } -> cast str
}

autocomplete: set docker-compose { [{
    "Flags": ["build","bundle","config","create","down","events","exec","help","images","kill","logs","pause","port","ps","pull","push","restart","rm","run","scale","start","stop","top","unpause","up","version"],
    "FlagValues": {
        "build": [{
            "Dynamic": ({ autocomplete.docker-compose.services })
        }],
        "create": [{
            "Dynamic": ({ autocomplete.docker-compose.services })
        }],
        "events": [{
            "Dynamic": ({ autocomplete.docker-compose.services })
        }],
        "exec": [{
            "Dynamic": ({ autocomplete.docker-compose.services })
        }],
        "kill": [{
            "Dynamic": ({ autocomplete.docker-compose.services })
        }],
        "logs": [{
            "Dynamic": ({ autocomplete.docker-compose.services })
        }],
        "pause": [{
            "Dynamic": ({ autocomplete.docker-compose.services })
        }],
        "pull": [{
            "Dynamic": ({ autocomplete.docker-compose.services })
        }],
        "push": [{
            "Dynamic": ({ autocomplete.docker-compose.services })
        }],
        "restart": [{
            "Dynamic": ({ autocomplete.docker-compose.services })
        }],
        "run": [{
            "Dynamic": ({ autocomplete.docker-compose.services })
        }],
        "scale": [{
            "Dynamic": ({ autocomplete.docker-compose.services })
        }],
        "start": [{
            "Dynamic": ({ autocomplete.docker-compose.services })
        }],
        "stop": [{
            "Dynamic": ({ autocomplete.docker-compose.services })
        }],
        "top": [{
            "Dynamic": ({ autocomplete.docker-compose.services })
        }],
        "unpause": [{
            "Dynamic": ({ autocomplete.docker-compose.services })
        }],
        "up": [{
            "Dynamic": ({ autocomplete.docker-compose.services })
        }]
    }
}] }

autocomplete: set gopass { [{
    "Flags": [ "--yes", "--clip", "-c", "--help", "-h", "--version", "-v" ],
    "AllowMultiple": true,
    "Dynamic": ({ exec: @ARGS --generate-bash-completion }),
    "AutoBranch": true
}] }

autocomplete: set debug { [{
    "Flags": ["on", "off"]
}] }

autocomplete: set murex-package {
    [{
        "FlagsDesc": {
            "install": "Installs a package from a user defined URI",
            "update":  "Updates all installed packages",
            "import":  "Import packages described in a backup package DB from user defined URI or local path",
            "enable":  "Enables a previously disabled package or module",
            "disable": "Disables a previously enabled package or module",
            "reload":  "Reloads all enabled modules",
            "status":  "Returns the version status of locally installed packages",
            "list":    "Returns a list of indexed packages/modules (eg what's enabled or disabled)",
            "cd":      "Changes working directory to a package's install location"
        },
        "FlagValues": {
            "import": [{
                "IncFiles": true
            }],
            "enable": [{
                "DynamicDesc": ({ murex-package: list disabled }),
                "ListView": true,
                "AutoBranch": true
            }],
            "disable": [{
                "DynamicDesc": ({ murex-package: list enabled }),
                "ListView": true,
                "AutoBranch": true
            }],
            "list": [{
                "Flags": [ "enabled", "disabled", "loaded", "not-loaded", "packages" ]
            }],
            "cd": [{
                "Dynamic": ({ murex-package: list packages })
            }]
        }
    }]
}

alias: builtins=runtime --builtins

private: test.alias.builtins {
    # Wrapper function around the alias for `builtins` for unit testing
    builtins
}

test: unit private test.alias.builtins {
    "StdoutRegex": ("[a-z0-9]+",),
    "StdoutType":  "json",
    "StdoutBlock": ({
        -> len -> set len;
        if { = len>0 } then {
            out "Len greater than 0"
        } else {
            err "No elements returned"
        }
    }),
    "StdoutIsArray": true
}

autocomplete: set murex-docs { [{
    "Dynamic": ({ builtins }),
	"Flags": [ "--summary" ],
	"FlagValues": {
		"--summary": [{
			"Dynamic": ({ builtins })
		}]
	}
}] }

private: autocomplete.aliases.and.builtins {
    # Returns a list of aliases and builtins
    runtime: --aliases -> formap k ! { out: $k } -> cast str
    builtins -> format str
}

test: unit private autocomplete.aliases.and.builtins {
    "StdoutType":  "str",
    "StdoutBlock": ({
        -> len -> set len;
        if { = len>0 } then {
            out "Len greater than 0"
        } else {
            err "No elements returned"
        }
    }),
    "StdoutIsArray": true
}

autocomplete: set summary { [{
    "IncExePath": true,
    "Dynamic": ({
        autocomplete.aliases.and.builtins
    })
}] }

config: eval shell safe-commands {
    -> alter --merge / ([
        "builtins", "jobs"
    ])
}

!if { man-summary terraform } then {
    summary terraform "Write, Plan, and Create Infrastructure as Code"
}

autocomplete: set terraform {[
    {
        "DynamicDesc": ({
            cast json
            config: set proc strict-arrays false
            if {
                and { = `$1`==`workspace` } { = `$2`==`select` }
            } then {
                terraform: workspace list -> regexp: (s/^[\s\*]+//) -> @[..-2] -> suffix: ': "Terraform workspace"' -> grep: -v "^:" -> cast: yaml -> format: json
            } else {
                terraform -help @PARAMS -> tabulate: --map --column-wraps --key-inc-hint
            }
        }),
        "AllowMultiple": true,
        "AllowAny": true,
        "ListView": true,
        "CacheTTL": 60
    }
]}

autocomplete: set terraform-docs {[
    {
        "DynamicDesc": ({
            cast json
            config: set proc strict-arrays false
            terraform-docs: @PARAMS --help -> tabulate: --key-value --map --split-comma --key-inc-hint
        }),
        #"IncDirs": true,
        "AllowMultiple": true,
        "AllowAny": true,
        "ListView": true
    }
]}

!if { man-summary go } then {
    summary go "Go is a tool for managing Go source code"
}

!if { man-summary atom } then {
    summary atom "Github Atom - Text editor / IDE"
}

!if { man-summary code } then {
    summary code "Microsoft Visual Studio Code - Text editor / IDE"
}

function sprintf {
    # This is a wrapper around the OS's default `printf`, replacing the now deprecated builtin of the same name
    -> set params
    switch {
        case  { $params -> ! } { err: "No parameters passed via STDIN" }
        case  { $ARGS[1]-> ! } { err: "No string supplied to print"    }
        catch {
            printf "$ARGS[1]\n" @params
        }
    }
}

summary docgen "Document generator for murex development"

autocomplete set docgen { [
    {
        "AllowMultiple": true,
        "Optional": true,
        "FlagsDesc": {
            "-panic": "Write a stack trace on error",
            "-readonly": "Don't write output to disk. Use this to test the config",
            "-verbose": "Verbose output (all log messages inc warnings)",
            "-version": "Output docgen version number and exit",
            "-warning": "Display warning messages (will also return a non-zero exit status if warnings found)"
        }
    },
    {
        "FlagsDesc": {
            "-config": "Location of the base docgen config file"
        },
        "FlagValues": {
            "-config": [{
                "IncFiles": true
            }]
        }
    }
] }

config define open image {
    "Description":  "Which mode to render images to the terminal.",
    "DataType":     "str",
    "Default":      "auto",
    "Options":      [ "auto", "compatible", "kitty", "iterm", "terminology", "sixel" ]
}

openagent set image {
    $ARGS[1] -> set file
    config get open image -> set mode

    if { = mode==`auto` } {
        switch {
            case { $TMUX }                        { set mode=compatible }
            case { $ITERM_PROFILE }               { set mode=iterm }
            case { $TERM_PROGRAM == "iTerm.app" } { set mode=iterm }
            case { $KITTY_WINDOW_ID }             { set mode=kitty }
            case { $TERM == "xterm-kitty" }       { set mode=kitty }
            case { $TERMINOLOGY }                 { set mode=terminology }
            catch                                 { set mode=compatible }
        }
    }

    # If Kitty but running inside a screen / tmux session, fallback to compatible.
    # We do this because tmux doesn't support reporting screen sizes via the TIOCGWINSZ ioctl.
    if { and { = mode==`kitty` } { = TERM==`screen` } } {
        set mode=compatible
    }

    switch $mode {
        case compatible {
            open-image $file
        }

        case kitty {
            try {
                kitty icat $file
            }
            catch {
                err "Error running `kitty`. Please check `kitty` is installed."
            }
        }

        case iterm {
            if { $TERM =~ '^(screen|tmux)' } then {
                if { ${tmux show -gw allow-passthrough} == "allow-passthrough on" } then {
                    osc = '{ESC}Ptmux;{ESC}{ESC}]'
                    st  = '{BELL}{ESC}\'
                } else {
                    open-image $file
                    break switch
                }
            } else {
                osc = '{ESC}]'
                st  = '{BELL}'
            }

            out "$(osc)1337;File=inline=1:${base64 -i $file -o -}$(st)"
        }

        case terminology {
            try {
                tycat -c $file
            }
            catch {
                err "Error running `tycat`. Please check `terminology` is installed."
            }
        }

        case sixel {
            try {
                img2sixel $file
            }
            catch {
                err "Error running `img2sixel`. Please check `libsixel` is installed."
            }
        }

        catch {
            out "Invalid rendering method. Please define in `config set open image` - 'auto' is recommended."
        }
    }
}

if { which: microk8s } then {

    private autocomplete.microk8s {
        # Top level completion results for microk8s
        microk8s -> tabulate -> cast str
    }

    test: unit private autocomplete.microk8s {
        "StdoutType":  "str",
        "StdoutBlock": ({
            -> len -> set len;
            if { = len>0 } then {
                out "Len greater than 0"
            } else {
                err "No elements returned"
            }
        }),
        "StdoutIsArray": true
    }

    private autocomplete.microk8s.kubectl {
        # Top level completion results for microk8s kubectl
        microk8s kubectl help -> tabulate: --map
    }

    test: unit private autocomplete.microk8s.kubectl {
        "StdoutType":  "json",
        "StdoutBlock": ({
            -> len -> set len;
            if { = len>0 } then {
                out "Len greater than 0"
            } else {
                err "No elements returned"
            }
        }),
        "StdoutIsMap": true
    }

    private autocomplete.microk8s.kubectl.dyndesc {
        # Dynamic completion for microk8s kubectl
        microk8s kubectl help $ARGS[1] -> @[^Options..^Usage]re -> regexp "s/:/\t/" -> tabulate: --key-inc-hint --map --split-comma
    }

    autocomplete: set microk8s {[
        {
            "Dynamic": ({ autocomplete.microk8s }),
            "AllowMultiple": false,
            "FlagValues": {
                "kubectl": [
                    {
                        "DynamicDesc":   ({ autocomplete.microk8s.kubectl }),
                        "ListView": true,
                        "AllowMultiple": false,
                        "Optional": false
                    },
                    {
                        #"DynamicDesc":   ({ autocomplete.microk8s.kubectl.dyndesc $ARGS[2] }),
                        "Dynamic": ({ out @ARGS }),
                        "AllowMultiple": true,
                        "AnyValue":      true
                        #"ListView":      true
                    }
                ]
            }
        }
    ]}

    autocomplete: set microk8s.kubectl {[
        {
            "DynamicDesc":   ({ autocomplete.microk8s.kubectl }),
            "ListView": true,
            "AllowMultiple": false,
            "Optional": false
        },
        {
            "DynamicDesc":   ({ autocomplete.microk8s.kubectl.dyndesc $ARGS[1] }),
            #"Dynamic": ({ out @ARGS }),
            "AllowMultiple": true,
            "AnyValue":      true,
            "ListView":      true
        }
    ]}

    autocomplete: set kubectl {[
        {
            "DynamicDesc":   ({ autocomplete.microk8s.kubectl }),
            "ListView": true,
            "AllowMultiple": false,
            "Optional": false
        },
        {
            "DynamicDesc":   ({ autocomplete.microk8s.kubectl.dyndesc $ARGS[2] }),
            #"Dynamic": ({ out @ARGS }),
            "AllowMultiple": true,
            "AnyValue":      true,
            "ListView":      true
        }
    ]}
}

if { which aws } then {
    autocomplete set aws [{
        "CacheTTL": 31536000, # 1 year
        "Dynamic": ({
            cast: str
            config: set proc strict-arrays false
            exec aws @PARAMS help -> @[^AVAILABLE..^SEE ALSO]re8bt -> regexp: (f/^o (.*)/)
            exec aws @PARAMS help -> man-get-flags -> format: str 
        }),
        "AllowMultiple": true,
        "AllowAny": true
    }]
}

if { which yarn } then {
    autocomplete: <!null> set yarn ({[
        {
            "CacheTTL": 30,
            "Dynamic": ({
                g: ${yarn <!null> bin}/* -> regexp: s,^.*/,,
            }),
            "FlagsDesc": ${
                trypipe <!null> {
                    yarn help -> tabulate: --key-value --split-comma --key-inc-hint --map
                }
            },
            "Optional": true,
            "AllowMultiple": true,
            "AllowNoFlagValue": true,
            "FlagValues": {"*": [
                { "IncDirs": true },
                { "Goto": "/0" }
            ]}
        },
        {
            "DynamicDesc": ({
                cast json
                if { g: package.json } then {
                    open package.json -> [ scripts ]
                }
            }),
            "Optional": true
        },
        {
            "Flags": ${
                trypipe <!null> {
                    yarn help -> @[Commands..Run]re -> [:1] -> cast str -> format json
                }
            },
            "FlagValues": {
                ${
                    trypipe <!null> {
                        yarn help -> @[Commands..Run]re -> [:1] -> foreach cmd {
                            out ("$cmd":
                                [{
                                    "DynamicDesc": ({ 
                                        yarn help $cmd -> tabulate: --key-value --split-comma --key-inc-hint --map
                                    }),
                                    "AllowMultiple": true,
                                    "AllowNoFlagValue": true,
                                    "FlagValues": {"*": [
                                        { "IncDirs": true },
                                        { "Goto": "/2/add/0" }
                                    ]}
                                }],)
                        }
                    }
                }
                "": [{ }]
            }
        }
    ]})
}

